[추상 자료형 review]
● 기능 / 구현
  기능 : 무엇을 하는지  
  구현 : 어떻게 하는지

● 추상 자료형
  기능에 집중해서 사용할 수 있게하는 자료형
  기능은 떠올리기 쉬우나 구현은 어렵기 때문에 구현을 생각하지 않고 빠르고 쉽게 사용하기 위해 사용
  ex) 리스트
  리스트를 어떻게 사용할 지는 모두가 알고 있다. 그러나 리스트가 어떻게 연산을 하는 지까지는 고려할 필요 없도록 하는 것이 추상 자료형


● 자료구조
  기능과 구현을 모두 표현한 형태
  기능을 사용할 때 마다 구현까지 고려해야 한다면 복잡하고 시간이 오래 걸릴 수 있음
  ex) 동적 배열, 링크드 리스트
  리스트는 동적배열 혹은 링크드 리스트를 통해 구현할 수 있다. 이처럼 어떤 식으로 원하는 연산을 구현하는 지에 대해서까지 생각해주는 것이 자료구조


  따라서 기능을 중심적으로 생각해 구현에 집중할 필요가 없다면 추상자료형을, 코드의 성능을 분석하거나 최적화 시켜야 할 때는 자료구조를 중심적으로 생각하면 된다.

<추상자료형 - 리스트>

  데이터간 순서를 유지
  ○ 기능 :
    1. 접근
    2. 탐색
    3. 삽입
    4. 삭제
  
  ○ 구현:
    동적 배열과 링크드리스트는 연산에 따른 소요시간이 각각 다르다
    따라서 자기가 많이 해야하는 연산에 유리한 자료구조를 선택하면 된다.

<추상자료형 - 리스트>

  데이터간 순서를 약속하는 추상자료형
  FIFO(First In First Out) -> 데이터를 앞에서만 삭제하고 뒤에서만 삽입

  동적배열과 링크드리스트로 구현 가능 but 링크드 리스트가 더 효율적

<추상자료형 - 스택>

  데이터간 순서를 약속하는 추상자료형
  LILO(Last In Last Out) -> 데이터가 뒤에서만 삽입/삭제 됨

<추상자료형 - 딕셔너리>
  데이터간 순서관계를 약속하지 않음
  key 와 value를 가지고 key를 통해 value를 찾을 수 있다.
  
  ○ 기능
    key - value 데이터 삽입
    key를 이용한 데이터 탐색
    key를 이용한 데이터 삭제
  ○ 구현:
    해시테이블 자료구조를 이용해 구현

<추상자료형 - 세트>
  데이터 순서관계를 약속하지 않음

  ○ 기능:
    데이터 삽입 (중복된 데이터 저장 x)
    데이터 탐색
    데이터 삭제

  ○ 구현:  
    해시테이블을 이용해 구현
    데이터 저장 시 인덱스에 key만 저장
    key가 이미 있는지 확인 후 있으면 저장 x
